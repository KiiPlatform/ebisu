# Kii JSON

Kii JSON is JSON parser library written in c (conforms to c99).
It Allows to specify multiple fields by jsonpath notation to obtain its values.
By this API, redundant fields by fields parsing code can be eliminated in your
application.
This design is inspired by [microjson](http://www.catb.org/esr/microjson/).

It is desinged for resource limited devices.
No dynamic memory allocation is used.

## Building Kii JSON

Execute following command on this directory.

```sh
make
```

After that, you can find target/libjkii.so.

## Building Kii JSON with variables

### Debug Build
```sh
make DEBUG=1
```

Debug option (-g) and Debug log enabled.

### Configure KII\_JSON\_FIXED\_TOKEN\_NUM

KII\_JSON\_FIXED\_TOKEN\_NUM  macro is used to manage amount memory used to
parse JSON when received it from server.
Memory is allocated on stack.
By default it is set to 128 in the Makefile.
To override the value, we provides `FIXED_JSON_TOKEN_NUM` variable.
```
make FIXED_JSON_TOKEN_NUM=256
```

Size of memory allocated by this can be calculated as following.
```c
sizeof(jkii_token_t) * KII\_JSON\_FIXED\_TOKEN\_NUM
```

### Dynamic memory allocation for JSON parsing
If you prefer to dynamicaly allocation than fixed memory allocation by
KII\_JSON\_FIXED\_TOKEN\_NUM, You will build sdk with FLEXIBLE\_JSON\_TOKEN
variable.

```
make FLEXIBLE_JSON_TOKEN=1
```

In this case, you need to implement KII\_JSON\_RESOURCE\_CB function and set the
pointer to kii\_json\_t struct.

If both KII\_JSON\_FIXED\_TOKEN\_NUM and FLEXIBLE\_JSON\_TOKEN are specified,
KII\_JSON\_FIXED\_TOKEN\_NUM is ignored.

### Combination of variables
Only KII\_JSON\_FIXED\_TOKEN\_NUM and FLEXIBLE\_JSON\_TOKEN is exclusive.
DEBUG and either KII\_JSON\_FIXED\_TOKEN\_NUM or FLEXIBLE\_JSON\_TOKEN
can be combined.

ex.)

```
make DEBUG=1 FLEXIBLE_JSON_TOKEN=1
```

## Example

If you want to extract "hoo" value from following JSON string:

```json
{
    "hoo" : "bar"
}
```

With Kii JSON, we can extract "hoo" value by followings:

```c
const char json_string[] = "{\"hoo\":\"bar\"}"; // target json string.

jkii_field_t fields[2];
jkii_t jkii;
char buf[256];
jkii_parse_result_t result;

memset(&jkii, 0x00, sizeof(jkii));
memset(fields, 0x00, sizeof(fields));

fields[0].path = "/hoo";
fields[0].type = JKII_FIELD_TYPE_STRING;
fields[0].field_copy.string = buf;
fields[0].field_copy_buff_size = sizeof(buf) / sizeof(buf[0]);
fields[1].path = NULL;

result = jkii_parse(&jkii, json_string,
        sizeof(json_string) / sizeof(json_string[0]), fields);

if (result == JKII_SUCCESS) {
    // success to extract "hoo" value.
    // you can find "hoo" value in buf array.
}
```

## Dependency.

Kii JSON uses [jsmn](http://zserge.com/jsmn.html).
It is statically linked by default.

jsmn is published under [MIT
License](http://opensource.org/licenses/mit-license.php).

## License
This software is distributed under [MIT License](http://opensource.org/licenses/mit-license.php).
Feel free to integrate it in your commercial product.
